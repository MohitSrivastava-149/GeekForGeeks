//Given a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.
//Note: One can move from node u to node v only if there's an edge from u to v. Find the BFS traversal of the graph starting from the 0th vertex, 
//from left to right according to the input graph. Also, you should only take nodes directly or indirectly connected from Node 0 in consideration.


class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int v, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> list =new ArrayList<>();
        boolean visited[]=new boolean[v];
        Queue<Integer> q=new LinkedList<>();
        q.add(0);
        visited[0]=true;
        while(!q.isEmpty()){
            int top=q.remove();
            list.add(top);
            for(int item:adj.get(top)){
                if(!visited[item]){
                    visited[item]=true;
                    q.add(item);
                }
            }
        }
        return list;
        
    }
}
